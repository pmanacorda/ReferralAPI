
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;

[ApiController]
[Authorize]
[Route("api/referral")]
public class ReferralController(IReferralService referralService) : ControllerBase{

    /// <summary>
    /// Retrieves the referral deep link that the authenticated user can share with new users.
    /// 
    /// The referral link is generated by combining the user's unique referral code with a base URL, 
    /// allowing the user to invite others to the platform. This deep link can be used for various 
    /// marketing and referral campaigns.
    /// 
    /// Pre-Conditions:
    ///     - The user must be authenticated, and their username must be valid.
    ///     - A referral code must have been generated successfully during the user's registration process.
    ///     - The DeepLink Service must be reachable, and the deep link base URL must be configured correctly 
    ///       in the application's settings.
    /// 
    /// Post-Conditions:
    ///     - None. This function is pure and does not modify any system state.
    /// 
    /// Error Handling:
    ///     - If the user's username is not found, a BadRequest response is returned with an appropriate error message.
    ///     - If the configuration for the deep link service is not found or is misconfigured, 
    ///       an Internal Server Error (500) response is returned with a detailed error message.
    ///     - In case of any other unexpected errors, a generic Internal Server Error (500) response is returned.
    /// </summary>
    /// <returns>
    /// DeepLink:
    ///     - Content.Link : string 
    ///         - The fully formatted deep link, including the user's referral code. This link is ready to share.
    ///     - Content.Code : string  
    ///         - The user's referral code, which is unique to each user.
    ///     - Content.Url : string  
    ///         - The base URL for the deep link. This is the root URL before the referral code is appended.
    ///     - Messages : Message[]
    ///         - A collection of messages that provide additional context or information about the request's processing.
    ///             - Message.Code : int 
    ///                 - Represents an enumerated code that corresponds to a specific type of message.
    ///             - Message.Description : string  
    ///                 - A human-readable description of the message, which could be an informational, warning, or error message.
    /// </returns>
    /// <remarks>
    /// Usage:
    /// - HTTP1.1 GET {BASE}/api/referral/link -H "Authorization: Bearer {token}"
    /// 
    /// Example Response:
    /// 200 OK {
    ///     "Content": {
    ///         "Link": "https://example.link/referral?referral_code=ABC123",
    ///         "Code": "ABC123",
    ///         "Url": "https://example.com/referral"
    ///     },
    ///     "Messages": []
    /// }
    /// 
    /// Possible Exceptions:
    /// - UserNameNotFoundException: Thrown when the user's username cannot be found.
    /// - ConfigurationNotFoundException: Thrown when the deep link service configuration is missing or incorrect.
    /// - Exception: A generic exception handler for unexpected errors.
    /// 400 BAD REQUEST {
    ///     "Content": {
    ///         "Link": "",
    ///         "Code": "",
    ///         "Url": ""
    ///     },
    ///     "Messages": [
    ///         {
    ///             "Code": 1,
    ///             "Description": "The username was not found or is invalid"
    ///         }    
    ///     ]
    /// }
    /// </remarks>
    [HttpGet("link")]
    public async Task<ActionResult<ApiResponse<DeepLink>>> GetReferralDeepLink(){
        ApiResponse<DeepLink> response = new();
        try{
            response.Content = await referralService.GetDeepLink(User);
            return Ok(response);
        }catch(UserNameNotFoundException ex){
            response.Messages.Add(ex.Msg);
            return BadRequest(response);
        }catch(ConfigurationNotFoundException ex){
            response.Messages.Add(ex.Msg);
            return StatusCode(StatusCodes.Status500InternalServerError, response);
        }catch (Exception){
            response.Messages.Add(GlobalMessages.INTERNAL_SERVER_ERROR);
            return StatusCode(StatusCodes.Status500InternalServerError, response);
        }
    }

    /// <summary>
    /// Retrieves successful referral conversions and returns the abbreviated name of the referral 
    /// and date of their sign up. The referee must have signed up using the referral code from the
    /// requesting authorized user.
    /// 
    /// Pre-Conditions:
    ///     - The user must be authenticated, and their username must be valid.
    ///     - The referral database must be online and the history table queryable 
    ///     - The referral history table must be successfully updated upon user registration
    /// 
    /// Post-Conditions:
    ///     - None. This function is pure and does not modify any system state.
    /// 
    /// Error Handling:
    ///     - If the user's username is not found, a BadRequest response is returned with an appropriate error message.
    ///     - If no matching referrals are found, an empty list (200 OK) is returned with an appropriate information message.
    ///     - In case of any other unexpected errors, a generic Internal Server Error (500) response is returned.
    /// </summary>
    /// <returns>
    /// Referral[]:
    ///     - Referral.Name : string 
    ///         - The Short user name of the successful referral
    ///     - Referral.Date : string  
    ///         - ISO 8601 formatted UTC date of when the referral signed up
    ///     - Messages : Message[]
    ///         - A collection of messages that provide additional context or information about the request's processing.
    ///             - Message.Code : int 
    ///                 - Represents an enumerated code that corresponds to a specific type of message.
    ///             - Message.Description : string  
    ///                 - A human-readable description of the message, which could be an informational, warning, or error message.
    /// </returns>
    /// <remarks>
    /// Usage:
    /// - HTTP1.1 GET {BASE}/api/referral/history -H "Authorization: Bearer {token}"
    /// 
    /// Example Response:
    /// 200 OK {
    ///     "Content": [
    ///         {
    ///           "Name": "Helen G.",
    ///           "Date": "2024-08-27T00:00:00-07:00"
    ///         },
    ///         {
    ///           "Name": "Johnny M.",
    ///           "Date": "2023-02-17T00:00:00-07:00"
    ///         }
    ///     ],
    ///     "Messages": []
    /// }
    /// 
    /// Possible Exceptions:
    /// - UserNameNotFoundException: Thrown when the user's username cannot be found.
    /// - Exception: A generic exception handler for unexpected errors.
    /// 400 BAD REQUEST {
    ///     "Content": {
    ///         "Link": "",
    ///         "Code": "",
    ///         "Url": ""
    ///     },
    ///     "Messages": [
    ///         {
    ///             "Code": 1,
    ///             "Description": "The username was not found or is invalid"
    ///         }    
    ///     ]
    /// }
    /// </remarks>
    [HttpGet("history")]
    public async Task<ActionResult<ApiResponse<List<Referral>>>> GetReferralHistory(){
        ApiResponse<List<Referral>> response = new();
        try{
            response.Content = await referralService.GetHistory(User);
            if(response.Content.Count == 0){
                response.Messages.Add(GlobalMessages.NO_REFERRALS_FOUND);
            }
            return Ok(response);
        }catch(UserNameNotFoundException ex){
            response.Messages.Add(ex.Msg);
            return BadRequest(response);
        }catch (Exception){
            response.Messages.Add(GlobalMessages.INTERNAL_SERVER_ERROR);
            return StatusCode(StatusCodes.Status500InternalServerError, response);
        }
    }

    /// <summary>
    /// Validates the provided user attribution token, and returns the original referral code 
    /// from the deep link. 
    /// 
    /// Pre-Conditions:
    ///     - The deep link service must be reachable
    /// 
    /// Post-Conditions:
    ///     - None. This function is pure and does not modify any system state.
    /// 
    /// Error Handling:
    /// - If the user did not sign-up using a referral link, it returns 200 OK with Content.Valid set to false 
    /// and Content.ReferralCode set to empty string.
    /// - In case of any other unexpected errors, a generic Internal Server Error (500) response is returned.
    /// </summary>
    /// <returns>
    /// TokenValidation:
    ///     - Content.Valid : boolean 
    ///         - True if the token was validated, false otherwise
    ///     - Content.ReferralCode : string  
    ///         - The referral code that should be pre-populated during sign up
    ///     - Messages : Message[]
    ///         - A collection of messages that provide additional context or information about the request's processing.
    ///             - Message.Code : int 
    ///                 - Represents an enumerated code that corresponds to a specific type of message.
    ///             - Message.Description : string  
    ///                 - A human-readable description of the message, which could be an informational, warning, or error message.
    /// </returns>
    /// <remarks>
    /// Usage:
    /// - HTTP1.1 GET {BASE}/api/referral/validate?token={token}
    /// 
    /// Example Response:
    /// 200 OK {
    ///     "Content": {
    ///             "Valid": true,
    ///             "ReferralCode": "XY7G4D"
    ///      }
    ///     "Messages": []
    /// }
    /// 
    /// Possible Exceptions:
    /// - Exception: A generic exception handler for unexpected errors.
    /// 200 OK {
    ///         "Content": {
    ///             "Valid": false,
    ///             "ReferralCode": ""
    ///          },
    ///         "Messages": [
    ///             {
    ///             "Code": 1,
    ///             "Description": "The user does not have any referrals"
    ///             }
    ///         ]
    ///     }
    /// </remarks>
    [HttpGet("validate")]
    [AllowAnonymous]
    public async Task<ActionResult<ApiResponse<TokenValidation>>> ValidateReferralToken([FromQuery] string token){
        ApiResponse<TokenValidation> response = new();
        try{
            response.Content = await referralService.ValidateToken(token);
            if(!response.Content.IsValid){
                response.Messages.Add(GlobalMessages.NO_REFERRALS_FOUND);
            }
            return Ok(response);
        }catch(Exception){
            response.Messages.Add(GlobalMessages.INTERNAL_SERVER_ERROR);
            return StatusCode(StatusCodes.Status500InternalServerError, response);
        }
    }
}